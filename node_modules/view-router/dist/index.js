"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const assert = require("assert");
const lodash_1 = require("lodash");
const path_1 = require("path");
const DEFAULT_CONFIG_PATH = "vrconfig.json";
class ViewRouter {
    constructor(views, options = {}) {
        this.options = options;
        this.views = new Map();
        for (const view of views) {
            assert.ok(view.id, "View has no id");
            assert.ok(view.urlPath, "View has no url path");
            if (view.urlPath.constructor === Array) {
                for (const path of view.urlPath) {
                    assert.equal(this.views.has(path), false);
                    this.views.set(path, view);
                }
            }
            else {
                assert.equal(this.views.has(view.urlPath), false);
                this.views.set(view.urlPath, view);
            }
        }
    }
    handle(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            const view = this.views.get(req.path);
            if (!lodash_1.isNil(view)) {
                yield this.getView(req, res, view);
            }
            next();
        });
    }
    getView(req, res, viewConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            let contextImport = null;
            try {
                contextImport = require(ViewRouter.getPath(lodash_1.isNil(viewConfig.viewHandlerPath) ? viewConfig.id : viewConfig.viewHandlerPath)).default;
            }
            catch (e) {
                console.warn(`Failed to import ${viewConfig.id}`);
            }
            const context = yield ((lodash_1.isNil(contextImport)) ?
                this.getDefaultView(req, res) :
                (contextImport.prototype.constructor === contextImport) ?
                    this.handleAsClass(contextImport, req, res) :
                    this.handleAsFunction(contextImport, req, res));
            return new Promise((resolve, reject) => {
                res.render((lodash_1.isNil(viewConfig.layout)) ? viewConfig.id : viewConfig.layout, context, (err, html) => {
                    if (err) {
                        return reject(err);
                    }
                    res.setHeader("Content-Type", "text/html; charset=utf-8");
                    res.send(html);
                    resolve();
                });
            });
        });
    }
    handleAsClass(viewConstructor, req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            const view = new viewConstructor(req, res);
            if (!lodash_1.isNil(view.checkRouteValid) && (yield !view.checkRouteValid())) {
                // TODO add better clause, throw specific error
                // res.end();
                return {};
            }
            if (!lodash_1.isNil(this.options.basicContentGenerator) && !lodash_1.isNil(view.setBasicContext)) {
                view.setBasicContext(this.options.basicContentGenerator(req, res));
            }
            return view.getContext();
        });
    }
    handleAsFunction(handlerFunction, req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            return handlerFunction(req, res);
        });
    }
    getDefaultView(req, res) {
        return {
            getContext: () => Promise.resolve((lodash_1.isNil(this.options.basicContentGenerator)) ? {} : this.options.basicContentGenerator(req, res)),
            setBasicContext: ctx => void 0,
            checkRouteValid: () => Promise.resolve(true)
        };
    }
    static getPath(subpath) {
        return path_1.join(this.path, subpath);
    }
}
ViewRouter.path = process.cwd();
function viewRouter(views, options) {
    if (!Array.isArray(views)) {
        options = views;
        views = undefined;
    }
    if (!lodash_1.isNil(options) && !lodash_1.isNil(options.basePath)) {
        ViewRouter.path = options.basePath;
    }
    if (lodash_1.isNil(views)) {
        let configReadPath = (!lodash_1.isNil(options) && !lodash_1.isNil(options.configFilePath)) ? options.configFilePath : DEFAULT_CONFIG_PATH;
        assert.equal(path_1.extname(configReadPath), ".json", "Not a json file");
        views = require(ViewRouter.getPath(configReadPath));
    }
    const vr = new ViewRouter(views, options);
    return (req, res, next) => {
        vr.handle(req, res, next);
    };
}
exports.viewRouter = viewRouter;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = viewRouter;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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
